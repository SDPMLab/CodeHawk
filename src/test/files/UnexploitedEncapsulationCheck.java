
import java.lang.ProcessBuilder.Redirect.Type;
import java.util.Scanner;

import org.apache.commons.lang.ObjectUtils.Null;
import org.eclipse.jdt.core.dom.SwitchCase;

//import org.sonar.plugins.java.api.semantic.Type.Primitives;

public class UnexploitedEncapsulationCheck {

}


abstract class DataBuffer {  // Noncompliant {{UnexploitedEncapsulation}}
    static int TYPE_BYTE;
    static int TYPE_DOUBLE;
    static int TYPE_FLOAT;
    static int TYPE_INT;
    static int TYPE_SHORT;
    static int TYPE_USHORT;
    
    /*abstract void getPixel();
    abstract void getSize();*/
}
/*class DataBufferByte{
    byte bdata[] = (byte[]) intData;
    void getPixel(){
        pixel = bdata[0] & 0xff;
    }
    void getSize(){
        length = bdata.length;
    }
}
class DataBufferUnshort{
    byte sdata[] = (short[]) intData;
    pixel getPixel(){
        pixel = sdata[0] & 0xff;
        return pixel;
    }
    pixel getSize(){
        length = sdata.length;
        return length;
    }
}*/


class ColorModel extends DataBuffer{ 
    /*protected DataBuffer dataBuffer;
    void model(){
        pixel = dataBuffer.getPixel();
        length = dataBuffer.getSize();
    }*/

    protected int transferType = DataBuffer.TYPE_BYTE;
    void model(int transferType){
        switch(transferType)
    {
            case TYPE_BYTE:
                byte bdata[] = (byte[]) intData;
                pixel = bdata[0] & 0xff;
                length = bdata.length;
                break;
            case TYPE_USHORT:
                short sdata[] = (short[]) inData;
                pixel = sdata[0] & 0xffff;
                length = sdata.length;
                break;
    };
    }
}